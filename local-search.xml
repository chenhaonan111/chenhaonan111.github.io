<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>English_Notes</title>
    <link href="/post/English-Notes.html"/>
    <url>/post/English-Notes.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.alphacoders.com/125/thumb-1920-1250776.jpg"></p><h2 id="英语名词复数变化-规则"><a href="#英语名词复数变化-规则" class="headerlink" title="英语名词复数变化(规则)"></a>英语名词复数变化(规则)</h2><pre><code class="hljs">1、一般在词尾加－s.    cups   杯子    days   日子2、以s,sh,ch,x结尾的词在词尾加－es    classes 班级    buses  公共汽车3、以“元音字母＋y”结尾的词，加－s    boy-boys  男孩    army-armies 军队4.1、以o结尾的词，多数加－s    kilo-kilos  公里    photo-photos  照片4.2、特殊以o结尾的词，在词尾加-es    tomato-tomatoes  西红柿    hero-heroes  英雄    potato-potatoes  土豆    negro-negroes 黑人    volcano-volcanoes 火山5、把f或fe变成v再加es的 词有9个。    口诀：    妻子拿刀去杀狼，吓得小偷架下藏。    半片树叶掉下来，砸到头上己命亡。    妻子wife-wives      刀子knife-knives    狼wolf-wolves，    小偷thief-thives    架子shelf-shelves   半half-halves，    树叶leaf-leaves     自己self-selves     life-lives</code></pre><h2 id="英语名词复数变化-不规则"><a href="#英语名词复数变化-不规则" class="headerlink" title="英语名词复数变化(不规则)"></a>英语名词复数变化(不规则)</h2><pre><code class="hljs">1、不规则变化的    man-men  男子    woman-women  女人    foot-feet  脚    goose-geese  鹅    tooth-teeth   牙齿    child-children  小孩    ox-oxen  牛    mouse-mice  老鼠2、单数形式与复数形式相同    sheep-sheep  绵羊    deer-deer  鹿3、中日不变，英法变，其余后面加S    Chinese-Chinese  中国人    Japanese-Japanese  日本人    Englishman-Englishmen 英国人    Frenchman-Frenchmen  发国人        其余的像American\Australian等等的复数在后面加s,    所以两个美国人要变成two Americans.</code></pre><h2 id="不定冠词a-an"><a href="#不定冠词a-an" class="headerlink" title="不定冠词a\an"></a>不定冠词a\an</h2><pre><code class="hljs">    对于还没有掌握音标的同学来说，区分单词是元音开头还是辅音开头可能比较困难，那可以先记语a,e,i,o,u这五个元音字母。    一般以这五个字母开头基本是以元音音素开头，个别单词除外。1.1 a用于以辅音音素开头的单词前    不规则：        a useful 有用的        a unifrom 制服        a usual  通常        a university 大学        a useless  无用的 1.2 an用于以元音音素开头的单词前    不规则：        an honest 诚实        an hour 小时        an European 欧洲人2.表示某类人或物    不定冠词a或an表示一类人或一类事物，在翻译时a或an不译成中文汉字。        A tailor makes clothes.  裁缝做衣服。        An owl can see in the dark.  猫头鹰在黑暗中能看见东西。3.表数量        a book 一本书 an island 一座岛        a knife 一把刀 an hour 一小时        I have a yellow umbrella.        我有一把黄色的伞。        There is a fox and an elephent in the forest.        森林里有一只狐狸和一头大象。4.用于初次提及某人或物        当第一次提到某人或某事物，非特指时，用不定冠词a或an起介绍作用。                        </code></pre>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux_Vim</title>
    <link href="/post/Linux-Vim.html"/>
    <url>/post/Linux-Vim.html</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code class="hljs">    Linux Vim 是从 vi 发展出来的一个文本编辑器。    代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。    简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。    vim 则可以说是程序开发者的一项很好用的工具。连 vim 的官方网站:www.vim.org/    自己也说 vim 是一个程序开发工具而不是文字处理软件。</code></pre><hr></hr><pre><code class="hljs">vi/vim 的使用    基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：    命令模式：        用户刚刚启动 vi/vim，便进入了命令模式。        此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。    以下是常用的几个命令：        i 切换到输入模式，以输入字符。        x 删除当前光标所在处的字符。        : 切换到底线命令模式，以在最底一行输入命令。        若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。        命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</code></pre><hr></hr><pre><code class="hljs">    输入模式        在命令模式下按下i就进入了输入模式。        在输入模式中，可以使用以下按键：            字符按键以及Shift组合，输入字符            ENTER，回车键，换行            BACK SPACE，退格键，删除光标前一个字符            DEL，删除键，删除光标后一个字符            方向键，在文本中移动光标            HOME/END，移动光标到行首/行尾            Page Up/Page Down，上/下翻页            Insert，切换光标为输入/替换模式，光标将变成竖线/下划线            ESC，退出输入模式，切换到命令模式    底线命令模式            在命令模式下按下:（英文冒号）就进入底线命令模式。            底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。            在底线命令模式中，基本的命令有（已经省略了冒号）：                q 退出程序                w 保存文件                按ESC键可随时退出底线命令模式。            简单的说，我们可以将这三个模式想成底下的图标来表示：</code></pre><hr></hr><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><pre><code class="hljs">vi/vim 使用实例使用 vi/vim 进入一般模式如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：    vim Hello.txt直接输入 vi 文件名 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</code></pre><hr></hr><pre><code class="hljs">* 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字    在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！    在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。        这个时候，键盘上除了     Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 </code></pre><hr></hr><pre><code class="hljs">按下 ESC 按钮回到一般模式好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！在一般模式中按下 :wq 储存后离开 viOK，我们要存档了，存盘并离开的指令很简单，输入 :wq 即可保存离开！OK! 这样我们就成功创建了一个 Hello.txt 的文件。</code></pre><h2 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h2><p><img src="/img/Linuximgs/2022-07-05-07-28-12.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-30.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-59.png"></p><hr></hr><h2 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-29-12.png"></p><hr></hr><h2 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-30-18.png"></p><pre><code class="hljs">    *   特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。    *   举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->    ]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC_tool_Class</title>
    <link href="/post/JDBC_tool_Class.html"/>
    <url>/post/JDBC_tool_Class.html</url>
    
    <content type="html"><![CDATA[<h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code class="hljs">* 目的：简化书写</code></pre><hr></hr><p><img src="https://images5.alphacoders.com/125/thumbbig-1251975.webp"></p><hr></hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><pre><code class="hljs">* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源</code></pre><hr></hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="hljs">* 代码实现：    public class JDBCUtils &#123;    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static&#123;        //读取资源文件，获取值。        try &#123;            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);            ///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load           (new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    /**     * 获取连接     * @return 连接对象     */    public static Connection getConnection() throws SQLException &#123;        return DriverManager.getConnection(url, user, password);    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn)&#123;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn)&#123;        if( rs != null)&#123;            try &#123;                rs.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><hr></hr><p><img src="https://images8.alphacoders.com/123/thumbbig-1233731.webp"></p><hr></hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre><code class="hljs">* 练习：    * 需求：        1. 通过键盘录入用户名和密码        2. 判断用户是否登录成功            * select * from user where username = &quot;&quot; and password = &quot;&quot;;            * 如果这个sql有查询结果，则成功，反之，则失败    * 步骤：        1. 创建数据库表 user            CREATE TABLE USER(                id INT PRIMARY KEY AUTO_INCREMENT,                username VARCHAR(32),                PASSWORD VARCHAR(32)                        );            INSERT INTO USER VALUES(NULL,&#39;zhangsan&#39;,&#39;123&#39;);            INSERT INTO USER VALUES(NULL,&#39;lisi&#39;,&#39;234&#39;);</code></pre><hr></hr><h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><pre><code class="hljs">        2. 代码实现：            public class JDBCDemo9 &#123;                public static void main(String[] args) &#123;                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag)&#123;                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    &#125;else&#123;                        System.out.println(&quot;用户名或密码错误！&quot;);                    &#125;                &#125;                /**                 * 登录方法                 */                public boolean login(String username ,String password)&#123;                    if(username == null || password == null)&#123;                        return false;                    &#125;                    //连接数据库判断是否登录成功                    Connection conn = null;                    Statement stmt =  null;                    ResultSet rs = null;                    //1.获取连接                    try &#123;                        conn =  JDBCUtils.getConnection();                        //2.定义sql                        String sql = &quot;select * from user where username = &#39;&quot;+username+&quot;&#39; and password = &#39;&quot;+password+&quot;&#39; &quot;;                        //3.获取执行sql的对象                        stmt = conn.createStatement();                        //4.执行查询                        rs = stmt.executeQuery(sql);                        //5.判断                       /* if(rs.next())&#123;//如果有下一行，则返回true                            return true;                        &#125;else&#123;                            return false;                        &#125;*/                       return rs.next();//如果有下一行，则返回true                                &#125; catch (SQLException e) &#123;                        e.printStackTrace();                    &#125;finally &#123;                        JDBCUtils.close(rs,stmt,conn);                    &#125;                    return false;                &#125;            &#125;</code></pre><hr></hr><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring JDBC</title>
    <link href="/post/JDBC.html"/>
    <url>/post/JDBC.html</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">*   在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。 *Spring JDBC 框架负责所有的低层细节，从开始打开连 接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</code></pre><p><img src="https://images5.alphacoders.com/124/thumbbig-1247695.webp"></p><pre><code class="hljs">Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update():执行DML语句。增、删、改语句        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合            * 注意：这个方法查询的结果集长度只能是1        * queryForList():查询结果将结果集封装为list集合            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中        * query():查询结果，将结果封装为JavaBean对象            * query的参数：RowMapper                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject：查询结果，将结果封装为对象            * 一般用于聚合函数的查询    ## 4. 练习：        * 需求：            1. 修改1号数据的 salary 为 10000            2. 添加一条记录            3. 删除刚才添加的记录            4. 查询id为1的记录，将其封装为Map集合            5. 查询所有记录，将其封装为List            6. 查询所有记录，将其封装为Emp对象的List集合            7. 查询总记录数        * 代码：            import cn.itcast.domain.Emp;            import cn.itcast.utils.JDBCUtils;            import org.junit.Test;            import org.springframework.jdbc.core.BeanPropertyRowMapper;            import org.springframework.jdbc.core.JdbcTemplate;            import org.springframework.jdbc.core.RowMapper;                        import java.sql.Date;            import java.sql.ResultSet;            import java.sql.SQLException;            import java.util.List;            import java.util.Map;                        public class JdbcTemplateDemo2 &#123;                //Junit单元测试，可以让方法独立执行                //1. 获取JDBCTemplate对象                private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</code></pre><h2 id="1-修改1号数据的-salary-为-10000"><a href="#1-修改1号数据的-salary-为-10000" class="headerlink" title="1. 修改1号数据的 salary 为 10000"></a>1. 修改1号数据的 salary 为 10000</h2><pre><code class="hljs">                /**                 * 1. 修改1号数据的 salary 为 10000                 */                @Test                public void test1()&#123;                    //2. 定义sql                    String sql = &quot;update emp set salary = 10000 where id = 1001&quot;;                    //3. 执行sql                    int count = template.update(sql);                    System.out.println(count);                &#125;</code></pre><h2 id="2-添加一条记录"><a href="#2-添加一条记录" class="headerlink" title="2. 添加一条记录"></a>2. 添加一条记录</h2><pre><code class="hljs">                /**                 * 2. 添加一条记录                 */                @Test                public void test2()&#123;                    String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;                    int count = template.update(sql, 1015, &quot;郭靖&quot;, 10);                    System.out.println(count);                &#125;</code></pre><h2 id="3-删除刚才添加的记录"><a href="#3-删除刚才添加的记录" class="headerlink" title="3.删除刚才添加的记录"></a>3.删除刚才添加的记录</h2><pre><code class="hljs">                /**                 * 3.删除刚才添加的记录                 */                @Test                public void test3()&#123;                    String sql = &quot;delete from emp where id = ?&quot;;                    int count = template.update(sql, 1015);                    System.out.println(count);                &#125;</code></pre><h2 id="4-查询id为1001的记录，将其封装为Map集合"><a href="#4-查询id为1001的记录，将其封装为Map集合" class="headerlink" title="4.查询id为1001的记录，将其封装为Map集合"></a>4.查询id为1001的记录，将其封装为Map集合</h2><pre><code class="hljs">                /**                 * 4.查询id为1001的记录，将其封装为Map集合                 * 注意：这个方法查询的结果集长度只能是1                 */                @Test                public void test4()&#123;                    String sql = &quot;select * from emp where id = ? or id = ?&quot;;                    Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);                    System.out.println(map);                    //&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;                &#125;</code></pre><h2 id="5-查询所有记录，将其封装为List"><a href="#5-查询所有记录，将其封装为List" class="headerlink" title="5. 查询所有记录，将其封装为List"></a>5. 查询所有记录，将其封装为List</h2><pre><code class="hljs">                /**                 * 5. 查询所有记录，将其封装为List                 */                @Test                public void test5()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);                                for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;                        System.out.println(stringObjectMap);                    &#125;                &#125;</code></pre><p><img src="https://images3.alphacoders.com/123/thumbbig-1231243.webp"></p><h2 id="6-1-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-1-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.1 查询所有记录，将其封装为Emp对象的List集合"></a>6.1 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code class="hljs">                /**                 * 6.1 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;                                    @Override                        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;                            Emp emp = new Emp();                            int id = rs.getInt(&quot;id&quot;);                            String ename = rs.getString(&quot;ename&quot;);                            int job_id = rs.getInt(&quot;job_id&quot;);                            int mgr = rs.getInt(&quot;mgr&quot;);                            Date joindate = rs.getDate(&quot;joindate&quot;);                            double salary = rs.getDouble(&quot;salary&quot;);                            double bonus = rs.getDouble(&quot;bonus&quot;);                            int dept_id = rs.getInt(&quot;dept_id&quot;);                                        emp.setId(id);                            emp.setEname(ename);                            emp.setJob_id(job_id);                            emp.setMgr(mgr);                            emp.setJoindate(joindate);                            emp.setSalary(salary);                            emp.setBonus(bonus);                            emp.setDept_id(dept_id);                                        return emp;                        &#125;                    &#125;);                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="6-2-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-2-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.2 查询所有记录，将其封装为Emp对象的List集合"></a>6.2 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code class="hljs">                /**                 * 6.2 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6_2()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="7-查询总记录数"><a href="#7-查询总记录数" class="headerlink" title="7. 查询总记录数"></a>7. 查询总记录数</h2><pre><code class="hljs">                 /**                 * 7. 查询总记录数                 */                @Test                public void test7()&#123;                    String sql = &quot;select count(id) from emp&quot;;                    Long total = template.queryForObject(sql, Long.class);                    System.out.println(total);                &#125;            &#125;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

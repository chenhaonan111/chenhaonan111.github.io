<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安培没了</title>
    <link href="/post/%E5%AE%89%E5%9F%B9%E6%B2%A1%E4%BA%86.html"/>
    <url>/post/%E5%AE%89%E5%9F%B9%E6%B2%A1%E4%BA%86.html</url>
    
    <content type="html"><![CDATA[<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"autoplay":true,"hotkey":true,"preload":"metadata","video":{"url":"img/b.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    
    
    <tags>
      
      <tag>news</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XML note</title>
    <link href="/post/XML-note.html"/>
    <url>/post/XML-note.html</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code class="hljs">XML 指可扩展标记语言（eXtensible Markup Language）。XML 被设计用来传输和存储数据，不用于表现和展示数据，HTML 则用来表现数据。XML文档如果以 XML 声明开始表述了文档的一些信息&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></pre><h1 id="XML-文档例子"><a href="#XML-文档例子" class="headerlink" title="XML 文档例子"></a>XML 文档例子</h1><pre><code class="hljs">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;site&gt;&lt;name&gt;NiNi&lt;/name&gt;&lt;url&gt;https://whoispower.cn&lt;/url&gt;&lt;logo&gt;NiNi-logo.png&lt;/logo&gt;&lt;desc&gt;NiNi Blog&lt;/desc&gt;&lt;/site&gt;</code></pre><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre><code class="hljs">基本语法：    1. xml文档的后缀名 .xml    2. xml第一行必须定义为文档声明    3. xml文档中有且仅有一个根标签    4. 属性值必须使用引号(单双都可)引起来    5. 标签必须正确关闭    6. xml标签名称区分大小写</code></pre><h1 id="组成部分："><a href="#组成部分：" class="headerlink" title="组成部分："></a>组成部分：</h1><h2 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h2><pre><code class="hljs">    1. 格式：&lt;?xml 属性列表 ?&gt;    2. 属性列表：        version：版本号，必须的属性        encoding：编码方式。告知解析引擎当前文档使用的集，默认值：ISO-8859-1, GBK可存中文。        standalone：是否独立            取值：                yes：不依赖其他文件                no：依赖其他文件</code></pre><h2 id="指令-了解"><a href="#指令-了解" class="headerlink" title="指令(了解)"></a>指令(了解)</h2><pre><code class="hljs">结合css的    &lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;    &lt;user&gt;        &lt;name&gt;NiNi&lt;/name&gt;        &lt;url&gt;https://whoispower.cn&lt;/url&gt;        &lt;logo&gt;NiNi-logo.png&lt;/logo&gt;        &lt;desc&gt;NiNi Blog&lt;/desc&gt;    &lt;/user&gt;创建一个a.cssname&#123;    color:red;&#125;</code></pre><h2 id="标签-自定义"><a href="#标签-自定义" class="headerlink" title="标签(自定义)"></a>标签(自定义)</h2><pre><code class="hljs">规则：    名称可以包含字母、数字以及其他的字符     名称不能以数字或者标点符号开始     名称不能以字母 xml（或者 XML、Xml 等等）开始     名称不能包含空格     注释：&lt;!--注释内容--&gt;</code></pre><h2 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h2><pre><code class="hljs">id属性值唯一</code></pre><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><pre><code class="hljs">if(a &amp;lt; b &amp;amp;&amp;am; a &amp;gt; c)if (a &lt; b &amp;&amp; a &gt; c )这样太麻烦了，更简便的方法是:    CDATA区：在该区域中的数据会被原样展示    格式：      &lt;![CDATA[ 数据 ]]&gt;</code></pre><h1 id="约束：规定xml文档的书写规则"><a href="#约束：规定xml文档的书写规则" class="headerlink" title="约束：规定xml文档的书写规则"></a>约束：规定xml文档的书写规则</h1><pre><code class="hljs">作为框架的使用者(程序员)：    1. 能够在xml中引入约束文档    2. 能够简单的读懂约束文档</code></pre><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><pre><code class="hljs">一种简单的约束技术引入dtd文档到xml文档中    内部dtd：将约束规则定义在xml文档中    外部dtd：将约束的规则定义在外部的dtd文件中        本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;        网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;例子：本地引入DTD文件student.dtd    &lt;!ELEMENT students (student*) &gt; //可以有多个student或0次    &lt;!ELEMENT student (name,age,sex)&gt;//仅有一个name,age,sex    &lt;!ELEMENT name (#PCDATA)&gt;//写字符串    &lt;!ELEMENT age (#PCDATA)&gt;//写字符串    &lt;!ELEMENT sex (#PCDATA)&gt;//写字符串    &lt;!ATTLIST student number ID #REQUIRED&gt;//id是唯一的XML文件student.xml    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;    &lt;!DOCTYPE students SYSTEM &quot;student.dtd&quot;&gt;&lt;!-- 本地 --&gt;&lt;students&gt;    &lt;student number=&quot;001&quot;&gt;        &lt;name&gt;tom&lt;/name&gt;        &lt;age&gt;18&lt;/age&gt;        &lt;sex&gt;male&lt;/sex&gt;    &lt;/student&gt;&lt;/students&gt;</code></pre><h3 id="Schema-复杂"><a href="#Schema-复杂" class="headerlink" title="Schema(复杂)"></a>Schema(复杂)</h3><pre><code class="hljs">引入：    1.填写xml文档的根元素    2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;    4.为每一个xsd约束声明一个前缀,作为标识          xmlns=&quot;http://www.itcast.cn/xml&quot;     &lt;students   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://www.itcast.cn/xml&quot;    xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;&gt;例子    student.xsd文件    &lt;?xml version=&quot;1.0&quot;?&gt;    &lt;xsd:schema xmlns=&quot;http://www.itcast.cn/xml&quot;    xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;    targetNamespace=&quot;http://www.itcast.cn/xml&quot;     elementFormDefault=&quot;qualified&quot;&gt;&lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;&lt;xsd:complexType name=&quot;studentsType&quot;&gt;    &lt;xsd:sequence&gt;        &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;    &lt;/xsd:sequence&gt;&lt;/xsd:complexType&gt;&lt;xsd:complexType name=&quot;studentType&quot;&gt;    &lt;xsd:sequence&gt;        &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;        &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;        &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;    &lt;/xsd:sequence&gt;    &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;&lt;/xsd:complexType&gt;&lt;xsd:simpleType name=&quot;sexType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;        &lt;xsd:enumeration value=&quot;male&quot;/&gt;        &lt;xsd:enumeration value=&quot;female&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;xsd:simpleType name=&quot;ageType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;        &lt;xsd:minInclusive value=&quot;0&quot;/&gt;        &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;xsd:simpleType name=&quot;numberType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;        &lt;xsd:pattern value=&quot;heima_\d&#123;4&#125;&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;/xsd:schema&gt; student.xml文件    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--     1.填写xml文档的根元素    2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://whoispower.cn/xml  student.xsd&quot;    4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://whoispower.cn/xml&quot; --&gt;&lt;students  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:a=&quot;http://whoispower.cn/xml&quot; xsi:schemaLocation=&quot;http://whoispower.cn/xml  student1.xsd&quot;&gt; &lt;student number=&quot;heima_0001&quot;&gt;     &lt;a.name&gt;tom&lt;/name&gt;     &lt;age&gt;18&lt;/age&gt;     &lt;sex&gt;male&lt;/sex&gt; &lt;/student&gt;&lt;/students&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql_note</title>
    <link href="/post/Mysql-note.html"/>
    <url>/post/Mysql-note.html</url>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><pre><code class="hljs">MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</code></pre><h2 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法:"></a>通用语法:</h2><pre><code class="hljs">1.MYSQL英文: Structured Query Language     简称 SQL2.MySQL数据库的SQL语句不分大小写，关键字建议用大写3.注释    - 单行注释: -- 注释内容 或 #注释内容(mysql特有)    - 多行注释: /*注释*/2.0分类:    1.DDL(Data Dafinition Language)数据定义语言，        用来定义数据库对象: 数据库，表，列等    2.DML(Data Mainpulation Language)数据库操作语言，        用来对数据库中表的数据进行增删改    3.DQL(Data Query Language)数据查询语言，        用来查询数据库中表的记录(数据)    4.DCL(Data Control Language)数据控制语言，        用来定义数据库的访问权限和安全级别，及创建用户</code></pre><h2 id="1-DDL"><a href="#1-DDL" class="headerlink" title="1.DDL"></a>1.DDL</h2><pre><code class="hljs">DDL(操作数据库)    查询: SHOW DATABASES     创建:         CREATE DATABASE 数据库名称;        CREATE DATABASE IF NOT EXISTS 数据库名称;(判断，如果不存在则创建)    删除:         DROP DATABASE 数据库名称;        DROP DATABASE IF EXISTS 数据库名称;(判断，如果存在则删除)    使用数据库        查看当前的数据库: SELECT DATABASE();        视同数据库: USE 数据库名称;</code></pre><h2 id="2-DML"><a href="#2-DML" class="headerlink" title="2.DML"></a>2.DML</h2><pre><code class="hljs">    DML(操作表)</code></pre><h3 id="创建-Create"><a href="#创建-Create" class="headerlink" title="创建(Create)"></a>创建(Create)</h3><pre><code class="hljs">CREATE TABLE 表明称(        字段名1 数据类型1,        字段名n 数据类型n,    );例子:    CREATE TABLE tb_user(        id int ,        username varchar(20),        password varchar(32)        );数据类型:https://www.runoob.com/mysql/mysql-data-types.html数据类型的使用方式：    age int;score double(总长度,小数点后保留的分数)0-100 2 scoredouble2);    brithday date;    char和varchar的区别: 分别存储&quot;张三&quot;这个姓名    name char(10) 占用十个字符空间，剩下的用空格填补--定长    varchar char(10) 占用两个字符 (性能高)--边长        案例.            create table student(            id int,            name varchar(10),            gender char(1),            brithday date,            score double(5,2),            emailAddress varchar(64),            tell varchar(15),            status tinyint            );</code></pre><h3 id="查询-Retrieve"><a href="#查询-Retrieve" class="headerlink" title="查询(Retrieve)"></a>查询(Retrieve)</h3><pre><code class="hljs">查看当前的数据库下所有表名称:SHOW TABLES;查询表结构: DESC 表名称;</code></pre><h3 id="修改-Update"><a href="#修改-Update" class="headerlink" title="修改(Update)"></a>修改(Update)</h3><pre><code class="hljs">修改表名:    ALTER TABLE 表名 RENAME TO 新的表名;添加一列:    ALTER TABLE 表名 ADD 列名 数据类型;修改数据类型:     ALTER TABLE 表名 MODIFY 列名 新数据类型;修改列名和数据类型    ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;删除列     ALTER TABLE 表名 DROP 列名;</code></pre><h3 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除(Delete)"></a>删除(Delete)</h3><pre><code class="hljs">DROP TABLE 表名称;DROP TABLE IF EXISTS 表名字;</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="添加表数据"><a href="#添加表数据" class="headerlink" title="添加表数据"></a>添加表数据</h2><pre><code class="hljs">1.给指定列添加数据    INSERT INTO 表名 (列名1,列名2,..) VALUES(值1,值2,..)2.给全部列添加数据    INSERT INTO 表名 VALUES(值1,值2,..)3.批量添加数据    INSERT INTO 表名 (列名1,列名2,..) VALUES(值1,值2,..)(值1,值2,..)(值1,值..)..;    INSERT INTO 表名 VALUES(值1,值2,..)(值1,值2,..)(值1,值2,..)..;案例：    添加数据        查询所有数据            SELECT * FROM std;        给指定列添加数据 insert into表名(列名1,列名2,..) values(值1,值2,);            insert INTO std (id,`name`) values(1,&quot;张飞&quot;);        给所有列添加数据            insert into std (id,`name`,sex,brithday,score,emailAddrestell,`status`,Hobby) VALUES(2,&#39;李四&#39;,&#39;男&#39;,&#39;199-11-10&#39;,88.8&#39;chn@gmail.com&#39;,&#39;13578945612&#39;,&#39;1&#39;,&#39;打篮球&#39;);        给所有列添加数据(简化方式)            insert into std VALUES(2,&#39;李四&#39;,&#39;男&#39;,&#39;199-11-10&#39;,88.8&#39;chn@gmail.com&#39;,&#39;13578945612&#39;,&#39;1&#39;,&#39;打篮球&#39;);        批量添加            INSERT INTO std             (id,`name`,sex,brithday,score,emailAddress,tell,`status`,Hobby)            VALUES            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; );        批量添加(简化方式)            INSERT INTO std            VALUES            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; );</code></pre><h2 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h2><pre><code class="hljs">修改表数据语法    UPDATE 表名 SET 列名1 = 值1, 【WHERE 条件】;    【注意】 修改语句中如果不加条件，则将所有数据都修改！例子:    将张飞的性别改为女        UPDATE std set sex = &#39;女&#39; WHERE `name` = &quot;张飞&quot;;    将张三的生日改为 199-12-12，分数改为99.99        UPDATE std set brithday=&#39;1999-12-12&#39;,score=&#39;99.99&#39; wher`name`=&#39;张飞&#39;;</code></pre><h2 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h2><pre><code class="hljs">    1.删除数据        DELETE FROM 表名 【where 条件】        【注意】 删除语句中如果不加条件，则将所有数据都删除！    例子:        删除hello记录            DELETE FROM std WHERE name = &#39;hello&#39;;        不加条件将所有数据删除            DELETE FROM std ;</code></pre><h1 id="查询-进阶"><a href="#查询-进阶" class="headerlink" title="查询(进阶)"></a>查询(进阶)</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code class="hljs">    SELECT         字段列表    FROM        表名列表    WHERE        条件列表    GROUP BY        分组字段    HAVING        分组后条件            ORDER BY        排序字段    LIMIT        分页限定</code></pre><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h3 id="查询多个字段"><a href="#查询多个字段" class="headerlink" title="查询多个字段"></a>查询多个字段</h3><pre><code class="hljs">    SELECT 字段列表 FROM 表名;    SELECT * FROM 表名;    举例:        创建 stu 表            CREATE table stu(            id int ,-- 编号            name VARCHAR(20),-- 姓名            age int,-- 年龄            sex VARCHAR(5),-- 性别            address VARCHAR(100), -- 地址            math double(5,2), -- 数学成绩            english double(5,2), -- 英语成绩            hire_date date -- 入学时间            );    查询表结构    DESC stu;    添加数据    INSERT INTO stu (id,`name`,age,sex,address,math,english,hire_date)            VALUES                (2,&#39;刘备&#39;,&#39;55&#39;,&#39;男&#39;,&#39;香港&#39;,&#39;56.23&#39;,&#39;15.86&#39;,&#39;1999-07-17&#39;),                (3,&#39;张飞&#39;,&#39;35&#39;,&#39;男&#39;,&#39;香港&#39;,&#39;15.63&#39;,&#39;56.34&#39;,&#39;1999-06-16&#39;),                (4,&#39;瑶妹&#39;,&#39;25&#39;,&#39;女&#39;,&#39;澳门&#39;,&#39;45.23&#39;,&#39;46.62&#39;,&#39;1999-05-16&#39;),                (5,&#39;貂蝉&#39;,&#39;15&#39;,&#39;女&#39;,&#39;台湾&#39;,&#39;86.23&#39;,&#39;94.23&#39;,&#39;1999-04-15&#39;),                (6,&#39;吕布&#39;,&#39;30&#39;,&#39;男&#39;,&#39;广东&#39;,&#39;15.45&#39;,&#39;84.12&#39;,&#39;1999-03-14&#39;),                (7,&#39;项羽&#39;,&#39;42&#39;,&#39;男&#39;,&#39;海南&#39;,&#39;78.62&#39;,&#39;15.10&#39;,&#39;1999-02-13&#39;),                (8,&#39;妲己&#39;,&#39;20&#39;,&#39;女&#39;,&#39;贵州&#39;,&#39;64.23&#39;,&#39;51.37&#39;,&#39;1999-01-12&#39;);            查询表数据                SELECT * FROM STU;            查询 name and age 两列                SELECT `name`,age FROM stu;            查询所有列的数据，列明的列表可以用*代替(不推荐)                SELECT id,`name`,age,sex,address,math,english,hire_date FROMstu;【推荐】                SELECT * FROM stu;【不推荐】            查询地址信息                    SELECT address FROM stu;</code></pre><h3 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h3><pre><code class="hljs">    SELECT DISTINCT 字段列表 FROM 表名;    2.0举例        -- 去除重复记录            SELECT DISTINCT address FROM stu;</code></pre><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><pre><code class="hljs">    AS : AS 也可以省略    -- 查询姓名，数学，英语成绩并且用as(可以省略【记得隔一个空格的距离别名(更加利于阅读表格)        SELECT `name`,math as 数学成绩,english as 英语成绩 FROM stu;</code></pre><h2 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询(where)"></a>条件查询(where)</h2><pre><code class="hljs">(1)条件查询语法    SELECT 字段列表 FROM 表名 WHERE 条件列表 ;    等于 =    不等于 ！= 或者 &lt;&gt;    在某个范围内都包含  BETWEEN ..AND..    多选一  IN(...)    模糊查询_单个任意字符 %多个任意字符 LINK 占位符号    是NULL  IS NULL    不是NULL  IS NOT NULL    并且 AND 或者 &amp;&amp;    或者 OR 或者 ||    非,不是 NOT 或者 !    举例:        -- 1.查询年龄大于20的学员信息            USE hei;            SELECT * FROM stu WHERE age &gt; 20;        -- 2.查询年龄大于等于20并且年龄小于等于40岁的学员信息            SELECT * FROM stu WHERE age &gt;= 20 &amp;&amp; age &lt;= 40;            SELECT * FROM stu WHERE age &gt;= 20 AND age &lt;= 40;            SELECT * FROM stu WHERE age BETWEEN 20 AND 40;        -- 3.查询入学时期在&#39;1999-04-01&#39;到&#39;1999-09-01&#39;的学员信息            SELECT * FROM stu WHERE hire_date BETWEEN &#39;1999-04-01&#39; AN&#39;1999-09-01&#39;;         -- 4.查询年龄等于15岁的学员信息            SELECT * FROM stu WHERE age = 15;        -- 5.查询年龄不等于15的学员信息            SELECT * FROM stu WHERE age != 15;            SELECT * FROM stu WHERE age &lt;&gt; 15;        -- 6.查询年龄等于15 或者 25 或者35 的学员信息            SELECT * FROM stu WHERE age = 15 || age = 25 || age = 35;            SELECT * FROM stu WHERE age = 15 or age = 25 or age = 35;            SELECT * FROM stu WHERE age in(15,25,35);        -- 7. 查询英语成绩为NULL的学员信息        -- 【注意】NULL 值的比较不能使用=  ！=  需要使用 IS IS NOT             SELECT * FROM stu WHERE english IS NULL;        -- 查询英语成绩不为NULL的学员信息            SELECT * FROM stu WHERE english IS NOT NULL;        -- 8.模糊查询             /*通配符：                (1)_代表单个任意字符                (2)%代表多个任意字符            */            例子:                -- 查询姓&#39;张&#39;的成员信息                    SELECT * FROM stu WHERE `name` like &#39;张%&#39;;                 -- 查询第二个字为‘备’的成员信息                    SELECT * FROM stu WHERE `name` like &#39;_备%&#39;;                -- 查询名字中包含‘妲’的成员信息                    SELECT * FROM stu WHERE `name` like &#39;%妲%&#39;;</code></pre><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><pre><code class="hljs">    (1)排序查询语法        SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1], 排序字2[排序方式2]..;    (2)排序方式         * ASC : 升序排列(默认值)        * DESC : 降序排列    【注意】如果有多个排序条件，当前面的条件值一样时候，才会根据第二条进行排序    例子:        -- 1.查询学生信息，按照年龄升序排序            SELECT id,`name`,age FROM stu ORDER BY age ASC;            SELECT * FROM ORDER BY age ASC;            SELECT * FROM ORDER BY age;  -- ASC是默认值，可以省略        -- 2.查询学生信息，按照数学成绩降序排序            SELECT id,`name`,math FROM stu ORDER BY math DESC;            SELECT * FROM stu ORDER BY math DESC;         -- 3.查询学生信息，按照数学成绩降序排列，如果成绩一样，再按照英语成绩升序排列                    SELECT * FROM stu ORDER BY math DESC,english ASC; </code></pre><h2 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询(group by)"></a>分组查询(group by)</h2><pre><code class="hljs">聚合函数    1.概念: 将一列作为一个整体进行纵向计算    2.聚合函数分类:    求平均值AVG([distinct] expr)    统计行的数量COUNT(&#123;*|[distinct] &#125; expr)        1.主键        2.*    求最大值MAX([distinct] expr)    求最小值MIN([distinct] expr)    求累加和SUM([distinct] expr)                        聚合函数语法:        SELECT 聚合函数名(列名) FROM 表;        【注意】 null值不参与所有聚合函数运算            例子:        -- 1.统计班级一共有多少个学生            SELECT COUNT(id) FROM stu;-- count 统计的列名不能为null            SELECT * FROM stu;        -- 2.查询数学成绩最高分            SELECT MAX(math) FROM stu;        -- 3. 查询数学成绩的最低分            SELECT MIN(math) FROM stu;        -- 4.查询数学成绩的总分            ELECT SUM(math) FROM stu;        -- 5.查询数学成绩的平均分            SELECT AVG(math) FROM stu;     1.分组查询的语法        SELECT 字段列表 FROM 表名 【WHERE 分组前条件限定】 GROUP BY 分组字段名 【WHERE 分组后条件过滤】;    【注意】 分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义        where 和 having 区别            * 执行时机不一样: where是分组之前进行限定，不满足where条件，                则不参与分组,而having是分组之后对结果进行过滤            * 可判断条件不一样: where 不能对聚合函数进行判断，having可以.    【执行顺序】where &gt; 聚合函数 &gt; having        例子:            -- 1.查询男同学和女同学各自的数学平均分                SELECT sex,AVG(math) FROM stu GROUP BY sex;            -- 2.查询男同学和女同学各自的数学平均分，以及各自人数                SELECT sex,AVG(math),COUNT(*) FROM stu GROUP BY sex;            -- 3.查询男同学和女同学各自的数学平均分，以及各自人数,要求分数低于70不进行分组                SELECT sex,AVG(math),COUNT(*) FROM stu WHERE math &gt; 70 GROUP BY sex;            -- 4.查询男同学和女同学各自的数学平均分，以及各自人数,要求分数低于70不进行分组,分组之后分数大于2个的。                SELECT sex,AVG(math),COUNT(*) FROM stu WHERE math &gt; 70 GROUP BY sex HAVING COUNT(*)&gt;2 ;</code></pre><h2 id="分页查询-LIMIT"><a href="#分页查询-LIMIT" class="headerlink" title="分页查询(LIMIT)"></a>分页查询(LIMIT)</h2><pre><code class="hljs">分页查询基本语法    SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询条目数;* 起始索引: 从0开始【计算公式】: 起始索引 = (当前页码-1) * 每页显示的条数tips:    * 分页查询LIMIT是mysql数据库的方言    * Oracle 分页查询使用 rownumber    * SQL Server分页查询使用top例子:    -- 1.从0开始查询，查询三条数据        * FROM stu LIMIT 0,3;     -- 2.每页显示三条数据，查询第一页数据        SELECT * FROM stu LIMIT 0,3;     -- 3.每页显示三条数据，查询第二页数据        SELECT * FROM stu LIMIT 3,3;     -- 4.每页显示三条数据，查询第三页数据        SELECT * FROM stu LIMIT 6,3; </code></pre><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><pre><code class="hljs">* 概念&amp;分类    约束是作用于表中列上的规则，用于限制加入表的数据    约束的存在保证了数据库中数据的正确性，有效性，完整性约束名称描述* 非空约束保证列中所有数据不能有NULL值NOT NULL * 唯一约束保证列中所有数据各不相同UNIQUE  * 主键约束主键是一行数据的唯一标识，要求非空且唯一PRIMARY KEY* 默认约束保证列中的值满足某一条件CHECK * 检查约束保存数据时，未指定值则采用默认值DEFAULT* 外键约束外键用来让两个数据之间的建立链接，保证数据的一致性和完整FOREIGN KEYTips : MYSQL不支持检查约束案例:    根据需求为表添加合适的约束-- 员工表    CREATE TABLE emp (    id INT PRIMARY KEY auto_increment, -- 员工id,主键且自增长    ename varchar(50) NOT NULL UNIQUE, -- 员工姓名,非空且唯一    joindate DATE NOT NULL, -- 入职日期,非空约束    salary DOUBLE(7,2) NOT NULL,-- 工资,非空约束    bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没奖金默认为0    );-- 查询表数据    SELECT * FROM emp;-- 添加数据    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);    SELECT * FROM emp;</code></pre><h2 id="演示主键约束-非空且唯一"><a href="#演示主键约束-非空且唯一" class="headerlink" title="演示主键约束,非空且唯一"></a>演示主键约束,非空且唯一</h2><pre><code class="hljs">-- 非空    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(NULL,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);-- 唯一    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(2,&#39;李四&#39;,&#39;1999-11-11&#39;,8890,5000);-- 演示非空约束    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(3,NULL,&#39;1999-11-11&#39;,8890,5000);-- 演示唯一约束    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(3,&#39;李四&#39;,&#39;1999-11-11&#39;,8890,5000);-- 默认约束    INSERT INTO emp (id,ename,joindate,salary) VALUES(3,&#39;王五&#39;,&#39;1999-11-11&#39;,8890);-- 演示 auto_increment-- 先删除旧的emp    DROP TABLE IF EXISTS emp;-- 添加一个新的emp    CREATE TABLE emp (    id INT PRIMARY KEY auto_increment, -- 员工id,主键且自增长    ename varchar(50) NOT NULL UNIQUE, -- 员工姓名,非空且唯一    joindate DATE NOT NULL, -- 入职日期,非空    salary DOUBLE(7,2) NOT NULL,-- 工资,非空    bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没奖金默认为0    );-- 添加两个数据    INSERT INTO emp (ename,joindate,salary,bonus) VALUES(&#39;李四&#39;1999-11-11&#39;,8890,5000);    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(NULL,&#39;李五&#39;1999-11-11&#39;,8890,5000);    SELECT * FROM emp;</code></pre><h2 id="非空约束语法"><a href="#非空约束语法" class="headerlink" title="非空约束语法"></a>非空约束语法</h2><pre><code class="hljs">    添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 NOT NULL,        ..        );    -- 创建完成后添加非空约束                ALTER TABLE 表名 MODIFY 字段名 数据类型 NOT NULL;            删除约束                ALTER TABLE 表名 MODIFY 字段名 数据类型;</code></pre><h2 id="唯一约束语法"><a href="#唯一约束语法" class="headerlink" title="唯一约束语法"></a>唯一约束语法</h2><pre><code class="hljs">添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 UNIQUE [AUTO_INCREMENT],        -- AUTO_INCREMENT : 当不指定值时自动增长        ..        );    CREATE TABLE 表名(        列名 数据类型,        ..        [CONSTRAINT][约束名称] UNIQUE(列名)        );    -- 创建完成后添加非空约束        ALTER TABLE 表名 MODIFY 字段名 数据类型 UNIQUE;        删除约束        ALTER TABLE 表名 DROP INDEX 字段名;</code></pre><h2 id="主键约束语法"><a href="#主键约束语法" class="headerlink" title="主键约束语法"></a>主键约束语法</h2><pre><code class="hljs">    添加约束        -- 创建表时添加约束        CREATE TABLE 表名(            列名 数据类型 PRIMARY KEY [AUTO_INCREMENT],            -- AUTO_INCREMENT : 当不指定值时自动增长            ..            );        CREATE TABLE 表名(            列名 数据类型,            ..            [CONSTRAINT][约束名称] PRIMARY(列名)            );        -- 创建完成后添加非空约束        ALTER TABLE 表名 ADD PRIMARY KEY;            删除约束                ALTER TABLE 表名 DROP PRIMARY KEY;            SELECT * FROM emp;</code></pre><h2 id="默认约束语法"><a href="#默认约束语法" class="headerlink" title="默认约束语法"></a>默认约束语法</h2><pre><code class="hljs">添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 DEFAULT 默认值,        ..        );    -- 创建完成后添加非空约束    ALTER TABLE 表名 ALTER 列名 SET DEFAULT;删除约    ALTER TABLE 表名 ALTER 列名 DROP DEFAULT;</code></pre><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><pre><code class="hljs">    添加约束        -- 创建表时添加约束        CREATE TABLE 表名(            列名 数据类型,            ..            [CONSTRAINT] [外键名称] FOREIGN KEY (外键列名) REFERENCES 主表(主表列名)            );        -- 创建完成后添加非空约束        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字称) REFERENCES 主表名称(主列表名称);        删除            ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;        举例:        -- 部门表(主表)            CREATE TABLE dept(            id int PRIMARY KEY auto_increment,            dep_name VARCHAR(20),            addr VARCHAR(20)            );        -- 员工表(从表)            CREATE TABLE emp(                id int PRIMARY KEY auto_increment,                emp_name varchar(20),                age int,                dep_id int,                -- 添加外键 dp_id关联主表dept中id                CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES dept(id)                );        -- 添加部门数据            INSERT INTO dept (dep_name,addr) VALUES            (&#39;研发部&#39;,&#39;广州&#39;),(&#39;销售部&#39;,&#39;深圳&#39;);        -- 添加员工数据            INSERT INTO emp (emp_name,age,dep_id) VALUES            (&#39;张三&#39;,20,1),            (&#39;李四&#39;,20,1),            (&#39;王五&#39;,20,1),            (&#39;赵六&#39;,20,2),            (&#39;孙七&#39;,22,2),            (&#39;周八&#39;,18,2);        -- 删除外键            ALTER TABLE emp DROP FOREIGN KEY fk_emp_dept;        -- 创建完成之后添加外键            ALTER TABLE emp ADD CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id)REFERENCES dept(id); </code></pre><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="表关系之一对多"><a href="#表关系之一对多" class="headerlink" title="表关系之一对多"></a>表关系之一对多</h2><pre><code class="hljs">    * 如:部门和员工表，一个员工对应一个部门，一个部门对应多个员工。    * 实现方式:在多的一方建立外键，指向一的一方的主键。    * 外键约束例子。</code></pre><h2 id="表关系之多对多"><a href="#表关系之多对多" class="headerlink" title="表关系之多对多"></a>表关系之多对多</h2><pre><code class="hljs">    * 如: 订单 和 商品    * 一个商品对应多个订单，一个订单对应多个商品    * 实现方式:建立第三张中间表，中间表至少包含两个外键，分别关联两方的主键。    * 例子.        -- 订单表            CREATE TABLE tb_order(            id int PRIMARY KEY auto_increment,            payment DOUBLE(10,2),            payment_type TINYINT,            status TINYINT            );        -- 商品表            CREATE TABLE tb_goods(            id int PRIMARY KEY auto_increment,            title VARCHAR(100),            price DOUBLE(10,2)            );        -- 订单商品中间表            CREATE TABLE tb_order_goods(            id int PRIMARY KEY auto_increment,            order_id int,            goods_id int,            count int            );        -- 建完表之后添加外键            -- ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主列表名称);            ALTER TABLE tb_order_goods ADD CONSTRAINT fk_order_iFOREIGN KEY (order_id) REFERENCES tb_order(id);            ALTER TABLE tb_order_goods ADD CONSTRAINT fk_goods_iFOREIGN KEY (goods_id) REFERENCES tb_goods(id);</code></pre><h2 id="表关系之一对一"><a href="#表关系之一对一" class="headerlink" title="表关系之一对一"></a>表关系之一对一</h2><pre><code class="hljs">* 如: 用户和用户详情* 一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常字段放另一张表，用于提升查询性能。* 实现方式: 在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)</code></pre><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><pre><code class="hljs">例如:    -- 部门表(主表)        CREATE TABLE dept(        did int PRIMARY KEY auto_increment,        dname VARCHAR(20)        );    -- 员工表(从表)        CREATE TABLE emp(        id int PRIMARY KEY auto_increment,        NAME varchar(10),        gender CHAR(1), -- 性别        salary DOUBLE, -- 工资        join_date DATE, -- 入职日期        dep_id INT,    -- 添加外键 dp_id关联主表dept中id        FOREIGN KEY(dep_id) REFERENCES dept(did)        );    -- 添加部门数据        INSERT INTO dept (dname) VALUES        (&#39;研发部&#39;),        (&#39;市场部&#39;),        (&#39;财务部&#39;),        (&#39;销售部&#39;);    -- 添加员工数据        INSERT INTO emp (`NAME`,gender,salary,join_date,dep_id) VALUES        (&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1),        (&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2),        (&#39;唐曾&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2),        (&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3),        (&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1),        (&#39;小白龙&#39;,&#39;男&#39;,2500,&#39;2011-02-14&#39;,NULL);        -- 查询emp 和 dept 的数据，emp.dep_id = dept_did         SELECT * FROM emp,dept WHERE emp.dep_id = dept.did; -- 内连笛卡尔积 : 取A,B两个集合 取A,B所有的组合情况    多表查询: 从多张表查询数据</code></pre><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><pre><code class="hljs">内连接: 相当于查询AB的交集数据-- 隐式内连接    SELECT 字段列表 FROM 表1,表2..WHERE 条件;-- 给表起别名    SELECT t1.`NAME`,t1.gender,t2.dname FROM emp t1,dept t2 WHERE t1.dep_id = t2.did ;-- 显示内连接    SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;    SELECT * FROM emp inner join dept on emp.dep_id = dept.did;--  外连接:     左外连接: 相当于查询A表所有数据和交集部分数据    SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;    -- 查询emp表的所有数据和对应的员工信息        SELECT * FROM emp LEFT JOIN dept ON emp.dep_id dept.did;    右外连接: 相当于查询B表所有数据和交集部分数据        SELECT 字段列表 FROM 表1 right [OUTER] JOIN 表2 ON 件;    -- 查询dept表的所有数据和对应的员工信息            SELECT * FROM emp RIGHT JOIN dept ON emp.dep_id =dept.did;</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><pre><code class="hljs">1.子查询概念    查询中嵌套查询，称嵌套查询为子查询2.子查询根据查询结果不同，作用不同:    单行单列: 作为条件值，使用= != &lt; &gt;等进行条件判断        SELECT 字段列表 FROM 表 WHERE 字段名 = (子查询);    -- 查询猪八戒的工资        SELECT `NAME`,salary FROM emp WHERE `NAME` = &#39;猪八戒&#39;;    -- 查询工资高于猪八戒的员工信息        SELECT `NAME`,salary FROM emp WHERE salary &gt; 3600;        SELECT *FROM emp WHERE salary &gt; (SELECT salary FROemp WHERE `NAME` = &#39;猪八戒&#39;);    --  多行单列: 作为条件值，使用in等关键字进行条件判断        SELECT 字段列表 FROM 表 WHERE 字段名 in(子查询);    -- 查询‘财务部’，‘市场部’所有员工信息        SELECT did FROM dept where dname = &#39;财务部&#39; or dnam=  &#39;市场部&#39;; -- 等于2or3        SELECT * FROM emp WHERE dep_id in (2,3);        SELECT * FROM emp WHERE dep_id in (SELECT did FROdept where dname = &#39;财务部&#39; or dname =  &#39;市场部&#39;);                                多行多列: 作为虚拟表。        SELECT 字段列表 FROM (子查询) WHERE 条件;    查询入职日期是‘2011-11-11’之后的员工信息和部门信息        SELECT * FROM emp WHERE join_date &gt; &#39;2011-11-11&#39;;        SELECT * FROM (SELECT * FROM emp WHERE join_da&gt; &#39;2011-11-11&#39;) t1,dept WHERE t1.dep_id = dedid;</code></pre><h2 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h2><pre><code class="hljs">DROP TABLEIFEXISTS emp;DROP TABLEIFEXISTS dept;DROP TABLEIFEXISTS job;DROP TABLEIFEXISTS salarygrade;-- 部门表    CREATE TABLE dept ( id INT PRIMARY KEY PRIMARY KEY, -门id    dname VARCHAR ( 50 ), -- 部门名称    loc VARCHAR ( 50 ) -- 部门所在地    );-- 职务表，职务名称，职务    CREATE TABLE job ( id INT PRIMARY KEY, jname VARCHAR ( 20 ), description VARCHAR ( 50 ) );    -- 员工表    CREATE TABLE emp (    id INT PRIMARY KEY,-- 员工id    ename VARCHAR ( 50 ),-- 员工姓名    job_id INT,-- 职务id    mgr INT,-- 上级领导    joindate DATE,-- 入职日期    salary DECIMAL ( 7, 2 ),-- 工资    bonus DECIMAL ( 7, 2 ),-- 奖金    dept_id INT,-- 所在部门编号    CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEYjob_idREFERENCES job ( id ),    CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEYdept_idREFERENCES dept ( id )     );        -- 工资等级表    CREATE TABLE salarygrade ( grade INT PRIMARY KEY, -- 级别    losalary INT, -- 最低工资    hisalary INT -- 最高工资    );-- 添加4个部门    INSERT INTO dept ( id, dname, loc )    VALUES        ( 10, &#39;教研部&#39;, &#39;北京&#39; ),        ( 20, &#39;学工部&#39;, &#39;上海&#39; ),        ( 30, &#39;销售部&#39;, &#39;广州&#39; ),        ( 40, &#39;财务部&#39;, &#39;深圳&#39; );-- 添加4个职务    INSERT INTO job ( id, jname, description )    VALUES    ( 1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39; ),    ( 2, &#39;经理&#39;, &#39;管理部门员工&#39; ),    ( 3, &#39;销售员&#39;, &#39;向客人推销产品&#39; ),    ( 4, &#39;文员&#39;, &#39;使用办公软件&#39; );-- 添加员工                        INSERT INTO emp ( id, ename, job_id, mgr, joindatesalary, bonus, dept_id )    VALUES    ( 1001, &#39;孙悟空&#39;, 4, 1004, &#39;2000-12-17&#39;, &#39;8000.00&#39;, NULL, 20 ),    ( 1002, &#39;卢俊义&#39;, 3, 1006, &#39;2001-02-20&#39;, &#39;16000.00&#39;, &#39;3000.00&#39;, 30 ),    ( 1003, &#39;林冲&#39;, 3, 1006, &#39;2001-02-22&#39;, &#39;12500.00&#39;, &#39;5000.00&#39;, 30 ),    ( 1004, &#39;唐僧&#39;, 2, 1009, &#39;2001-04-02&#39;, &#39;29750.00&#39;, NULL, 20 ),    ( 1005, &#39;李逵&#39;, 4, 1006, &#39;2001-09-28&#39;, &#39;12500.00&#39;, &#39;14000.00&#39;, 30 ),    ( 1006, &#39;宋江&#39;, 2, 1009, &#39;2001-05-01&#39;, &#39;28500.00&#39;, NULL, 30 ),    ( 1007, &#39;刘备&#39;, 2, 1009, &#39;2001-09-01&#39;, &#39;24500.00&#39;, NULL, 10 ),    ( 1008, &#39;猪八戒&#39;, 4, 1004, &#39;2007-04-19&#39;, &#39;30000.00&#39;, NULL, 20 ),    ( 1009, &#39;罗贯中&#39;, 1, NULL, &#39;2001-11-17&#39;, &#39;50000.00&#39;, NULL, 10 ),    ( 1010, &#39;吴用&#39;, 3, 1006, &#39;2001-09-08&#39;, &#39;15000.00&#39;, &#39;0.00&#39;, 30 ),    ( 1011, &#39;沙僧&#39;, 4, 1004, &#39;2007-05-23&#39;, &#39;11000.00&#39;, NULL, 20 ),    ( 1012, &#39;李逵&#39;, 4, 1006, &#39;2001-12-03&#39;, &#39;9500.00&#39;, NULL, 30 ),    ( 1013, &#39;小白龙&#39;, 4, 1004, &#39;2001-12-03&#39;, &#39;30000.00&#39;, NULL, 20 ),    ( 1014, &#39;关羽&#39;, 4, 1007, &#39;2002-01-23&#39;, &#39;13000.00&#39;, NULL, 10 );                        -- 添加5个工资等级        INSERT INTO salarygrade ( grade, losalary, hisalary )        VALUES        ( 1, 7000, 12000 ),        ( 2, 12010, 14000 ),        ( 3, 14010, 20000 ),        ( 4, 20010, 30000 ),        ( 5, 30010, 99990 );    -- 1.查询所有员工信息。查询员工号，员工姓名，工资，职务名称，职务描述    -- 隐式内连接        SELECT            emp.id,            emp.ename,            emp.salary,            job.jname,            job.description         FROM            emp,            job         WHERE            emp.job_id = job.id;        SELECT        *         FROM            emp;        SELECT        *         FROM        job;            -- 显示内连接        SELECT            emp.id,            emp.ename,            emp.salary,            job.jname,            job.description             FROM                emp                INNER JOIN job ON emp.job_id = job.id;                    -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置        -- 隐式内连接            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc                 FROM                emp,                job,                dept                 WHERE                emp.job_id = job.id                 AND dept.id = emp.dept_id;        -- 显示内连接            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc             FROM                emp                INNER JOIN job ON emp.job_id = job.id                INNER JOIN dept ON emp.dept_id = dept.id;        -- 3.查询员工姓名，工资，工资等级                SELECT                    emp.ename,                    emp.salary,                    t2.*                 FROM                    emp,                    salarygrade t2                 WHERE                    emp.salary &gt;= t2.losalary                     AND emp.salary &lt;= t2.hisalary;        -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc,                t2.grade             FROM                emp,                job,                dept,                salarygrade t2             WHERE                emp.salary &gt;= t2.losalary                 AND emp.salary &lt;= t2.hisalary                 AND emp.job_id = job.id                 AND emp.dept_id = dept.id;                -- 5.查询出部门编号、部门名称、部门位置、部门人数            SELECT dept_id,COUNT(*) FROM emp GROUP BY dept_id;            SELECT * FROM dept, (SELECT dept_id, COUNT(*) FROM emp GROUP BY dept_id) t1 WHERE t1.dept_id =dept.id;</code></pre><h1 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h1><pre><code class="hljs">DROP TABLE IF EXISTS account;-- 创建账户表    CREATE TABLE account(    id int PRIMARY KEY auto_increment,    name varchar(10),    money double(10,2)    );-- 添加数据    INSERT INTO account(name,money) values(&#39;张三&#39;,1000),(&#39;李四&#39;,1000);    UPDATE account set money = 1000;    select * from account;-- 开启事务    BEGIN;-- 转账操作-- 1. 查询李四账户金额是否大于500-- 2. 李四账户 -500UPDATE account set money = money - 500 where name = &#39;李四&#39;;-- 出现异常了...-- 3. 张三账户 +500UPDATE account set money = money + 500 where name = &#39;张三&#39;;-- 提交事务COMMIT;-- 回滚事务ROLLBACK; -- 查看事务的默认提交方式SELECT @@autocommit;-- 1 自动提交  0 手动提交-- 修改事务提交方式set @@autocommit = 0;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>English note</title>
    <link href="/post/English-Notes.html"/>
    <url>/post/English-Notes.html</url>
    
    <content type="html"><![CDATA[<h2 id="英语名词复数变化-规则"><a href="#英语名词复数变化-规则" class="headerlink" title="英语名词复数变化(规则)"></a>英语名词复数变化(规则)</h2><pre><code class="hljs">1、一般在词尾加－s.    cups   杯子    days   日子2、以s,sh,ch,x结尾的词在词尾加－es    classes 班级    buses  公共汽车3、以“元音字母＋y”结尾的词，加－s    boy-boys  男孩    army-armies 军队4.1、以o结尾的词，多数加－s    kilo-kilos  公里    photo-photos  照片4.2、特殊以o结尾的词，在词尾加-es    tomato-tomatoes  西红柿    hero-heroes  英雄    potato-potatoes  土豆    negro-negroes 黑人    volcano-volcanoes 火山5、把f或fe变成v再加es的 词有9个。    口诀：    妻子拿刀去杀狼，吓得小偷架下藏。    半片树叶掉下来，砸到头上己命亡。    妻子wife-wives      刀子knife-knives        狼wolf-wolves，小偷thief-thives        架子shelf-shelves   半half-halves，    树叶leaf-leaves     自己self-selves         生命life-lives</code></pre><h2 id="英语名词复数变化-不规则"><a href="#英语名词复数变化-不规则" class="headerlink" title="英语名词复数变化(不规则)"></a>英语名词复数变化(不规则)</h2><pre><code class="hljs">1、不规则变化的    man-men  男子    woman-women  女人    foot-feet  脚    goose-geese  鹅    tooth-teeth   牙齿    child-children  小孩    ox-oxen  牛    mouse-mice  老鼠2、单数形式与复数形式相同    sheep-sheep  绵羊    deer-deer  鹿3、中日不变，英法变，其余后面加S    Chinese-Chinese  中国人    Japanese-Japanese  日本人    Englishman-Englishmen 英国人    Frenchman-Frenchmen  发国人        其余的像American\Australian等等的复数在后面加s,    所以两个美国人要变成two Americans.</code></pre><h2 id="不定冠词a-an"><a href="#不定冠词a-an" class="headerlink" title="不定冠词a\an"></a>不定冠词a\an</h2><pre><code class="hljs">    没有掌握音标的同学可以先记语a,e,i,o,u这五个元音字母。    一般以这五个字母开头基本是以元音音素开头，个别单词除外。</code></pre><p><a href="https://www.bilibili.com/video/BV1Kf4y1j7Ap?t=1.3"><h1>点我学音标</h1></a></p><pre><code class="hljs">1.1 a用于以辅音音素开头的单词前    不规则：        a useful 有用的        a unifrom 制服        a usual  通常        a university 大学        a useless  无用的 1.2 an用于以元音音素开头的单词前    不规则：        an honest 诚实        an hour 小时        an European 欧洲人2.表示某类人或物    不定冠词a或an表示一类人或一类事物，在翻译时a或an不译成中文汉字。        A tailor makes clothes.  裁缝做衣服。        An owl can see in the dark.  猫头鹰在黑暗中能看见东西。3.表数量        a book 一本书 an island 一座岛        a knife 一把刀 an hour 一小时        I have a yellow umbrella.        我有一把黄色的伞。        There is a fox and an elephent in the forest.        森林里有一只狐狸和一头大象。4.用于初次提及某人或物    当第一次提到某人或某事物，非特指时，用不定冠词a或an起介绍作用。        She is sitting on a chair.        她坐在一张椅子上。</code></pre><h2 id="不定冠词-记一记"><a href="#不定冠词-记一记" class="headerlink" title="不定冠词-记一记"></a>不定冠词-记一记</h2><pre><code class="hljs">have a look 看一看 have a good time 过得愉快have a talk 演讲have a fever 发烧hava a lesson 教一堂课have a bath 洗个澡have a rese 休息have(talk) a walk 散步hava headache 头痛have a nice trip 路途愉快have a try 试一试have a word with 与..谈一谈a quarter 四分之一half an hour 半小时three times a day 三天一次</code></pre><h2 id="定冠词"><a href="#定冠词" class="headerlink" title="定冠词"></a>定冠词</h2><pre><code class="hljs">1. the + 序数词         Mother was my first teacher in my life.妈妈是我生命中的第一个老师. 2. the + 最高级         I am the tallest in our class. 我是咱们班里个子最高的3. the + 独一无二    the Yangtze River 长江     the Yellow River黄河4. the + 乐器    the paino 钢琴5. the + adj(表类人)    the young 年轻人    the poor 穷人</code></pre><h2 id="零定冠词"><a href="#零定冠词" class="headerlink" title="零定冠词"></a>零定冠词</h2><pre><code class="hljs">零冠词使用口诀及注释：下列情况免冠词，代词限定名词前，专有名词不可数，科球类三餐饭，复数名词表泛指，两季星期月份前，颜色语种和国名，称呼习语和头衔。1．下列情况免冠词，代词限定名词前，代词限定词放在名词的前面时，名词不加冠词：    my book; any book2．专有名词不可数，科球类三餐饭，    2.1 不可数名词，专有名词通常不加冠词。        Failure is the mother of success.　失败乃成功之母    2.2 在三餐、球类运动和娱乐运动的名称前，不加冠词，        have breakfast，play chess。3．复数名词表泛指，两季星期月份前，    We go to school from Monday to Friday.　     我们从星期一到星期五都上课。4．颜色语种和国名，称呼习语和头衔    4.1 颜色语种和国名如         in black; in English; in Canada    4.2 在称呼或表示官衔，职位的名词前不加冠词。        The guards took the American to General Lee.         士兵们把这个美国人送到李将军那里。</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->  ]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux_Vim</title>
    <link href="/post/Linux-Vim.html"/>
    <url>/post/Linux-Vim.html</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code class="hljs">    Linux Vim 是从 vi 发展出来的一个文本编辑器。    代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。    简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。    vim 则可以说是程序开发者的一项很好用的工具。连 vim 的官方网站:www.vim.org/    自己也说 vim 是一个程序开发工具而不是文字处理软件。</code></pre><hr></hr><pre><code class="hljs">vi/vim 的使用    基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：    命令模式：        用户刚刚启动 vi/vim，便进入了命令模式。        此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。    以下是常用的几个命令：        i 切换到输入模式，以输入字符。        x 删除当前光标所在处的字符。        : 切换到底线命令模式，以在最底一行输入命令。        若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。        命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</code></pre><hr></hr><pre><code class="hljs">    输入模式        在命令模式下按下i就进入了输入模式。        在输入模式中，可以使用以下按键：            字符按键以及Shift组合，输入字符            ENTER，回车键，换行            BACK SPACE，退格键，删除光标前一个字符            DEL，删除键，删除光标后一个字符            方向键，在文本中移动光标            HOME/END，移动光标到行首/行尾            Page Up/Page Down，上/下翻页            Insert，切换光标为输入/替换模式，光标将变成竖线/下划线            ESC，退出输入模式，切换到命令模式    底线命令模式            在命令模式下按下:（英文冒号）就进入底线命令模式。            底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。            在底线命令模式中，基本的命令有（已经省略了冒号）：                q 退出程序                w 保存文件                按ESC键可随时退出底线命令模式。            简单的说，我们可以将这三个模式想成底下的图标来表示：</code></pre><hr></hr><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><pre><code class="hljs">vi/vim 使用实例使用 vi/vim 进入一般模式如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：    vim Hello.txt直接输入 vi 文件名 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</code></pre><hr></hr><pre><code class="hljs">* 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字    在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！    在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。        这个时候，键盘上除了     Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 </code></pre><hr></hr><pre><code class="hljs">按下 ESC 按钮回到一般模式好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！在一般模式中按下 :wq 储存后离开 viOK，我们要存档了，存盘并离开的指令很简单，输入 :wq 即可保存离开！OK! 这样我们就成功创建了一个 Hello.txt 的文件。</code></pre><h2 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h2><p><img src="/img/Linuximgs/2022-07-05-07-28-12.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-30.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-59.png"></p><hr></hr><h2 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-29-12.png"></p><hr></hr><h2 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-30-18.png"></p><pre><code class="hljs">    *   特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。    *   举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->    ]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC_tool_Class</title>
    <link href="/post/JDBC_tool_Class.html"/>
    <url>/post/JDBC_tool_Class.html</url>
    
    <content type="html"><![CDATA[<h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code class="hljs">* 目的：简化书写</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><pre><code class="hljs">* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="hljs">    public class JDBCUtils &#123;    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static&#123;        //读取资源文件，获取值。        try &#123;            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);            ///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load           (new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    /**     * 获取连接     * @return 连接对象     */    public static Connection getConnection() throws SQLException &#123;        return DriverManager.getConnection(url, user, password);    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn)&#123;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn)&#123;        if( rs != null)&#123;            try &#123;                rs.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre><code class="hljs">    * 需求：        1. 通过键盘录入用户名和密码        2. 判断用户是否登录成功            * select * from user where username = &quot;&quot; and password = &quot;&quot;;            * 如果这个sql有查询结果，则成功，反之，则失败    * 步骤：        1. 创建数据库表 user            CREATE TABLE USER(                id INT PRIMARY KEY AUTO_INCREMENT,                username VARCHAR(32),                PASSWORD VARCHAR(32)                        );            INSERT INTO USER VALUES(NULL,&#39;zhangsan&#39;,&#39;123&#39;);            INSERT INTO USER VALUES(NULL,&#39;lisi&#39;,&#39;234&#39;);</code></pre><h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><pre><code class="hljs">        2. 代码实现：            public class JDBCDemo9 &#123;                public static void main(String[] args) &#123;                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag)&#123;                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    &#125;else&#123;                        System.out.println(&quot;用户名或密码错误！&quot;);                    &#125;                &#125;                /**                 * 登录方法                 */                public boolean login(String username ,String password)&#123;                    if(username == null || password == null)&#123;                        return false;                    &#125;                    //连接数据库判断是否登录成功                    Connection conn = null;                    Statement stmt =  null;                    ResultSet rs = null;                    //1.获取连接                    try &#123;                        conn =  JDBCUtils.getConnection();                        //2.定义sql                        String sql = &quot;select * from user where username = &#39;&quot;+username+&quot;&#39; and password = &#39;&quot;+password+&quot;&#39; &quot;;                        //3.获取执行sql的对象                        stmt = conn.createStatement();                        //4.执行查询                        rs = stmt.executeQuery(sql);                        //5.判断                       /* if(rs.next())&#123;//如果有下一行，则返回true                            return true;                        &#125;else&#123;                            return false;                        &#125;*/                       return rs.next();//如果有下一行，则返回true                                &#125; catch (SQLException e) &#123;                        e.printStackTrace();                    &#125;finally &#123;                        JDBCUtils.close(rs,stmt,conn);                    &#125;                    return false;                &#125;            &#125;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring JDBCTemplate</title>
    <link href="/post/JDBC_SpringTemplate.html"/>
    <url>/post/JDBC_SpringTemplate.html</url>
    
    <content type="html"><![CDATA[<h2 id="JDBC-Spring"><a href="#JDBC-Spring" class="headerlink" title="JDBC Spring"></a>JDBC Spring</h2><pre><code class="hljs">*   在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。 *Spring JDBC 框架负责所有的低层细节，从开始打开连 接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update():执行DML语句。增、删、改语句        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合            * 注意：这个方法查询的结果集长度只能是1        * queryForList():查询结果将结果集封装为list集合            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中        * query():查询结果，将结果封装为JavaBean对象            * query的参数：RowMapper                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject：查询结果，将结果封装为对象            * 一般用于聚合函数的查询</code></pre><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><pre><code class="hljs">* 需求：    1. 修改1号数据的 salary 为 10000    2. 添加一条记录    3. 删除刚才添加的记录    4. 查询id为1的记录，将其封装为Map集合    5. 查询所有记录，将其封装为List    6. 查询所有记录，将其封装为Emp对象的List集合    7. 查询总记录数* 代码：    import cn.itcast.domain.Emp;    import cn.itcast.utils.JDBCUtils;    import org.junit.Test;    import org.springframework.jdbc.core.BeanPropertyRowMapper;    import org.springframework.jdbc.core.JdbcTemplate;    import org.springframework.jdbc.core.RowMapper;                import java.sql.Date;    import java.sql.ResultSet;    import java.sql.SQLException;    import java.util.List;    import java.util.Map;                public class JdbcTemplateDemo2 &#123;    //Junit单元测试，可以让方法独立执行 //1. 获取JDBCTemplate对象    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</code></pre><h2 id="1-修改1号数据的-salary-为-10000"><a href="#1-修改1号数据的-salary-为-10000" class="headerlink" title="1. 修改1号数据的 salary 为 10000"></a>1. 修改1号数据的 salary 为 10000</h2><pre><code class="hljs">                /**                 * 1. 修改1号数据的 salary 为 10000                 */                @Test                public void test1()&#123;                    //2. 定义sql                    String sql = &quot;update emp set salary = 10000 where id = 1001&quot;;                    //3. 执行sql                    int count = template.update(sql);                    System.out.println(count);                &#125;</code></pre><h2 id="2-添加一条记录"><a href="#2-添加一条记录" class="headerlink" title="2. 添加一条记录"></a>2. 添加一条记录</h2><pre><code class="hljs">                /**                 * 2. 添加一条记录                 */                @Test                public void test2()&#123;                    String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;                    int count = template.update(sql, 1015, &quot;郭靖&quot;, 10);                    System.out.println(count);                &#125;</code></pre><h2 id="3-删除刚才添加的记录"><a href="#3-删除刚才添加的记录" class="headerlink" title="3.删除刚才添加的记录"></a>3.删除刚才添加的记录</h2><pre><code class="hljs">                /**                 * 3.删除刚才添加的记录                 */                @Test                public void test3()&#123;                    String sql = &quot;delete from emp where id = ?&quot;;                    int count = template.update(sql, 1015);                    System.out.println(count);                &#125;</code></pre><h2 id="4-查询id为1001的记录，将其封装为Map集合"><a href="#4-查询id为1001的记录，将其封装为Map集合" class="headerlink" title="4.查询id为1001的记录，将其封装为Map集合"></a>4.查询id为1001的记录，将其封装为Map集合</h2><pre><code class="hljs">                /**                 * 4.查询id为1001的记录，将其封装为Map集合                 * 注意：这个方法查询的结果集长度只能是1                 */                @Test                public void test4()&#123;                    String sql = &quot;select * from emp where id = ? or id = ?&quot;;                    Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);                    System.out.println(map);                    //&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;                &#125;</code></pre><h2 id="5-查询所有记录，将其封装为List"><a href="#5-查询所有记录，将其封装为List" class="headerlink" title="5. 查询所有记录，将其封装为List"></a>5. 查询所有记录，将其封装为List</h2><pre><code class="hljs">                /**                 * 5. 查询所有记录，将其封装为List                 */                @Test                public void test5()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);                                for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;                        System.out.println(stringObjectMap);                    &#125;                &#125;</code></pre><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRU3ngt8iOEVABznAaCcaUAgdXI02hxE3Abcg&usqp=CAU"></p><h2 id="6-1-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-1-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.1 查询所有记录，将其封装为Emp对象的List集合"></a>6.1 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code class="hljs">                /**                 * 6.1 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;                                    @Override                        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;                            Emp emp = new Emp();                            int id = rs.getInt(&quot;id&quot;);                            String ename = rs.getString(&quot;ename&quot;);                            int job_id = rs.getInt(&quot;job_id&quot;);                            int mgr = rs.getInt(&quot;mgr&quot;);                            Date joindate = rs.getDate(&quot;joindate&quot;);                            double salary = rs.getDouble(&quot;salary&quot;);                            double bonus = rs.getDouble(&quot;bonus&quot;);                            int dept_id = rs.getInt(&quot;dept_id&quot;);                                        emp.setId(id);                            emp.setEname(ename);                            emp.setJob_id(job_id);                            emp.setMgr(mgr);                            emp.setJoindate(joindate);                            emp.setSalary(salary);                            emp.setBonus(bonus);                            emp.setDept_id(dept_id);                                        return emp;                        &#125;                    &#125;);                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="6-2-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-2-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.2 查询所有记录，将其封装为Emp对象的List集合"></a>6.2 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code class="hljs">                /**                 * 6.2 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6_2()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="7-查询总记录数"><a href="#7-查询总记录数" class="headerlink" title="7. 查询总记录数"></a>7. 查询总记录数</h2><pre><code class="hljs">                 /**                 * 7. 查询总记录数                 */                @Test                public void test7()&#123;                    String sql = &quot;select count(id) from emp&quot;;                    Long total = template.queryForObject(sql, Long.class);                    System.out.println(total);                &#125;            &#125;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
